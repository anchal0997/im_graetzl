<% meta(
    title: t('.title'),
    description: t('.description'),
    robots: 'noindex, nofollow',
  )
%>

<style>

</style>
<section class="reports">

  <% if user_signed_in? && current_user.admin? %>
  <!-- ADMIN REPORT INTERFACE -->
    <script>
    (function () {
    // --------------- BEGIN PROJECT JS WORKING AREA ---------------

      // Init Vars
      moment.locale('de-at');

      // TimeTable Object for Charts - Including Unit & Date Range
      var timePeriod = {
        unit:'',
        dates:[],
        datesFriendly:[]
      };
      // Time Period Data for Charts
      var timePeriodData = [];

      var users = []; // Clean Users Array to work with
      var graetzls = []; // Clean Grätzl Array to work with
      var locations = []; // Clean Location Array to work with
      var host = 'http://' + window.location.host + '/'; // Environment Path
      var admin_user_path = host + 'admin/users/'; // Path for Active Admin Links


      $( document ).ready(function() {



      // Load Data from Server - if all Data loaded, do something ...
        var p1 = requestUsers();
        var p2 = requestGraetzls();
        var p3 = requestLocations();

        Promise.all ([p1, p2, p3]).then(function() {

          datatable_users();
          datatable_graetzls();
          charts();

        }).catch( function() {alert('Error Loading Data ...'); } )
      });



      // -------------- Helper Functions --------------

      // Date Converter
      function formatDate(date){
        var date = new Date(date).toISOString().substr(0, 19).replace('T', ' ');
        return date;
      }

      // Get Infos from other JSON Array over ID
      var fetchFromID = function(id, type){
        if ( type == 'graetzls' ) {
          var result = $.grep(graetzls, function(e){ return e.id == id; });
          var name = (result[0].name);
          var url = (result[0].graetzl_path);
          return [name, url];
        }
      }

    // ------------- Data Table - User Detail Row --------
    /* Formatting function for row details - modify as you need */
      function format ( data ) {
        var content =
        '<table>'+
          '<tr>'+
              '<td>' + data.first_name + ' ' + data.last_name + '</td>'+
          '</tr>'+
        '</table>';
        return content;
      }


      // -------------- Ajax JSON Requests --------------

      // Get Users and Set Clean User Array
      var requestUsers = function(){
        return new Promise( function(resolve, reject) {
          $.ajax( {
            url:'/admin/users.json',
            method:'GET',
            success:function(response) {
              for( i=0; i < response.length; i++ ) {
                users.push({
                  id: response[i].id,
                  graetzl_id: response[i].graetzl_id,
                  //created_at: formatDate(response[i].created_at),
                  created_at: new Date(response[i].created_at),
                  username: response[i].username,
                  first_name: response[i].first_name,
                  last_name: response[i].last_name,
                  email: response[i].email,
                  user_admin_path: admin_user_path + response[i].slug,
                  user_path: host + response[i].slug
                })
              }
              resolve();
            }
          });
        });
      } // Get Users

      // Get Grätzls and Set Clean Grätzl Array
      var requestGraetzls = function(){
        return new Promise( function(resolve, reject) {
          $.ajax( {
            url:'/admin/graetzls.json',
            method:'GET',
            success:function(response) {
              for( i=0; i < response.length; i++ ) {
                graetzls.push({
                  id: response[i].id,
                  name: response[i].name,
                  graetzl_path: host + response[i].slug,
                  users_count: response[i].users_count
                })
              }
              resolve();
            }
          });
        });
      } // Get Grätzls

      // Get Locations and Set Clean Location Array
      var requestLocations = function(){
        return new Promise( function(resolve, reject) {
          $.ajax( {
            url:'/admin/locations.json',
            method:'GET',
            success:function(response) {
              for( i=0; i < response.length; i++ ) {
                //console.log(response[i]);
                /*locations.push({
                  id: response[i].id,
                  name: response[i].name,
                  graetzl_path: host + response[i].slug,
                  users_count: response[i].users_count
                })*/
              }
              resolve();
            }
          });
        });
      } // Get Locations

      // -------------- Create Datatables (jQuery Plugin) --------------

      // Create User Table
      var datatable_users = function() {
        $('#datatable_users').DataTable( {
          data: users,
          "order": [[ 0, "desc" ]],
          "processing": true,
          "scrollY": "400px",
          "scrollCollapse": true,
          "paging": false,
          columns: [
            {
              "className": 'details-control',
              "orderable": false,
              "data": null,
              "defaultContent": 'details'
            },
            { data: 'id' },
            { data: 'username',
              "render": function( data, type, row, meta ){
                if ( type === 'display' ) {
                data = '<a href="' + row['user_admin_path'] + '">' + data + '</a>';
              }
                return data;
              }
            },
            { data: 'email' },
            { data: 'graetzl_id',
              render: function( data, type, row, meta ) {
                var graetzlname = fetchFromID(row['graetzl_id'], 'graetzls');
                if ( type == "sort" || type == 'type' ) {
                  // Use Grätzl-Name for Sorting
                  return graetzlname[0];
                } else {
                  // Use Link for Output
                  data = '<a href="' + graetzlname[1] + '">' + graetzlname[0] + '</a>';
                  return data;
                }
              }
            },
            { data: 'created_at',
              render: function(data, type) {
                if ( type == "sort" || type == 'type' ) {
                  return data;
                } else {
                  // Use Friendly Format for Output
                  return moment(data).format('lll');

                }
              }
            }
          ]
        });
      }

      // Create Grätzl Table
      var datatable_graetzls = function() {
        $('#datatable_graetzls').DataTable( {
          data: graetzls,
          "order": [[ 1, "desc" ]],
          "processing": true,
          "scrollY": "400px",
          "scrollCollapse": true,
          "paging": false,
          columns: [
            { data: 'name'},
            { data: 'users_count' }
          ]
        });
      }

      // -------------- Event Listener --------------
      $(document).ready(function() {

        // Add event listener for opening and closing detail rows
        $('#datatable_users').on('click', 'td.details-control', function () {
          var table = $('#datatable_users').DataTable();
          var tr = $(this).closest('tr');
          var row = table.row( tr );

          if ( row.child.isShown() ) {
            // This row is already open - close it
            row.child.hide();
            tr.removeClass('shown');
          }
          else {
            // Open this row
            row.child( format(row.data()) ).show();
            tr.addClass('shown');
          }
        }); // Expand User Row

        // Charts
        var chart = $("#chart");


      });


      // Test with Charts ....
      var charts = function(){

        createDateChartValues('users', 30, 'days');

      };



      // Create Chart Arrays
      var createDateChartValues = function( type, count, unit ) {

        // Set Length of Data Array to Count
        timePeriodData.length = count;
        timePeriodData.fill(0); // Prefill all Values with 0

        // Fill Time Period Array with Dates for Chart-View
        var generateTimePeriod = function( count, unit ) {
          timePeriod.unit = unit;
          var currentDate = new Date(); // Today
          if (unit == 'days') {
            for ( i=0; i<count; i++ ) {

              var tmpDate = new Date();
              tmpDate.setDate(currentDate.getDate() - i);
              tmpDate.setHours(0,0,0,0);
              var priorDate = new Date(tmpDate);
              var priorDateFriendly = moment(priorDate).format('ll');

              //console.log(priorDateFriendly);
              timePeriod.dates.push(priorDate);
              timePeriod.datesFriendly.push(priorDateFriendly);
            }
          }
        } // Time Period Array
        generateTimePeriod(count, unit); // Set Time Period


        // Loop Check all Users
        for ( i=0; i<users.length; i++) {
          var checkDate = new Date(users[i].created_at);

          // Loop Check every single User for all Dates in Range
          for ( d=0; d<timePeriod.dates.length; d++ ) {

            var check = checkDateRange( checkDate, timePeriod.dates[d], unit );
            if (check == true) {

              //console.log('user gefunden: ' + users[i].id + ' date: ' + timePeriod.dates[d] + ' pos: ' + d);
              // Push Sum of found Data Goals to Data Array on right Index-Postion
              timePeriodData[d] +=1;
              break;

            }
          } // Loop Check every single User for all Dates
        } // Loop Check all Users

        //console.log(timePeriodData);
        //console.log(timePeriod);

        // Draw User Chart
        usersChart(timePeriod.datesFriendly.reverse(), timePeriodData.reverse());

      } // Create Chart Arrays


      // Helper Function - Check if Date is in Date-Range
      var checkDateRange = function( checkDate, startDate, unit ) {

        var tmpDate = new Date();
        tmpDate.setDate(startDate.getDate() + 1);
        tmpDate.setHours(0,0,0,0);
        var endDate = new Date(tmpDate);

        if (checkDate >= startDate && checkDate <= endDate ){
          return true;
        }
      }



      var usersChart = function(labeldata, chartdata) {
        new Chart(chart, {
          type: 'line',
          data: {
            labels: labeldata,
            datasets: [{
              label: 'Registrierungen',
              data: chartdata,
            }]
          }
        });
      }



    // --------------- END WORK JS WORKING AREA ---------------
    })();
    </script>


    <canvas id="chart" width="900" height="200"></canvas>


    <table id="datatable_users" class="stripe hover row-border" width="100%">
      <thead>
        <tr>
          <th></th>
          <th>ID</th>
          <th>Username</th>
          <th>E-Mail</th>
          <th>Grätzl</th>
          <th>Registriert</th>
        </tr>
      </thead>
    </table>



    <table id="datatable_graetzls" class="stripe hover row-border" width="100%">
      <thead>
        <tr>
          <th>Grätzl</th>
          <th>Anzahl User</th>
        </tr>
      </thead>
    </table>


  <!-- // ADMIN REPORT INTERFACE -->

  <% else %>
  <!-- NO ADMIN RIGHTS -->
    Keine Admin Rechte ...
  <% end %>

</section>
